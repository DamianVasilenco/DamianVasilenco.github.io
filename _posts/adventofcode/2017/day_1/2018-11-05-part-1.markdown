---
layout: post
title:  "Day 1: Inverse Captcha Part 1"
categories: adventofcode 2017 day_1
permalink: adventofcode/2017/day_1/part_1
---

So, welcome on my first blog post! You don't care, right? Nice, as you should.

Today i'm going to resolve, and explain, the first challange of the site: [Advent of Code (2017 edition)](https://adventofcode.com/2017/day/1)

Why am i doing that? Well, first of all, these kind of exercises are a good way to learn a new programming language. Second, i don't have any friends.

Ok, let's see what the challenge is all about:

>The captcha requires you to review a sequence of digits (your puzzle input) and find the sum of all digits that match the next digit in the list. The list is circular, so the digit after the last digit is the first digit in the list.
>For example:
> - 1122 produces a sum of 3 (1 + 2) because the first digit (1) matches the second digit and the third digit (2) matches the fourth digit.
> - 1111 produces 4 because each digit (all 1) matches the next.
> - 1234 produces 0 because no digit matches the next.
> - 91212129 produces 9 because the only digit that matches the next one is the last digit, 9.

What we basically need to do is:
1. loop through a list of digits (our input)
2. while looping, get the value of the current digit and the next digit
3. compare the two values
4. if matches: add the value of the current digit to the sum

Ok, now that we more or less know what to do we can finally start to code! This time i'm gonna use Rust, but don't desperate, i'm going to explain everything.

In the following snippet of code we are declaring the variables that we need.

```rust
fn main() {
    let input = "1122";
    
    let mut sum = 0;
    let mut index = 0;
}
```

Now we need to loop through the list of digits.

```rust
fn main() {
    let input = "1122";
    
    let mut sum = 0;
    let mut index = 0;
    
    while index < input.len() {
        index = index + 1;
    }
}
```

The next thing to do is to compare the current digit and the next, but before that, we need to create them.

```rust
fn main() {
    let input = "1122";
    
    let mut sum = 0;
    let mut index = 0;
    
    while index < input.len() {
        let d_curr = input.chars().nth(index).unwrap();
        let mut d_next = input.chars().nth(index).unwrap();
        
        index = index + 1;
    }
}
```

Now we have the current and next digit, the last thing is to compare them? Right?

```rust
fn main() {
    let input = "1122";
    
    let mut sum = 0;
    let mut index = 0;
    
    while index < input.len() {
        let d_curr = input.chars().nth(index).unwrap();
        let mut d_next = input.chars().nth(index).unwrap();
        
        if d_curr == d_next {
            sum = sum + d_curr.to_digit(10).unwrap();
        }
        
        index = index + 1;
    }
}
```

WRONG. If we try to run it we are gonna have a problem: during the last iteration the variable "d_next" is going to have an unexpected value, because, for example with the input "1122", the digit at index 3 + 1 (4) doesn't exist.

Don't you remember? the list is circular. So what are we going to do? Throw everything, start yoga and buy a book about self-improvement? YES, well, no... (btw, [12 Rules for Life](https://en.wikipedia.org/wiki/12_Rules_for_Life) is a very good one)

There are a lot of ways to workaround this, but a simple and fast one is to check if we are in the last iteration, if so we know that we need to compare the last digit with the first, nothing fancy.

```rust
fn main() {
    let input = "1122";
    
    let mut sum = 0;
    let mut index = 0;

    while index < input.len() {
        let d_curr = input.chars().nth(index).unwrap();
        let mut d_next = input.chars().nth(index).unwrap();
        
        if index == (input.len() - 1) {
            d_next = input.chars().nth(0).unwrap();
        } else {
            d_next = input.chars().nth(index + 1).unwrap();
        }

        if d_curr == d_next {
            sum = sum + d_curr.to_digit(10).unwrap();
        }

        index = index + 1;
    }

    println!("sum: {}", sum);
}
```

And at the end we add a println to know the sum.

So, if we try to run it:

```sh
$ rustc main.rs
$ ./main 
sum: 3
```

Seems to work! Now let's try with a bigger input: ``

The result should be: `1097`

[Final source code](https://raw.githubusercontent.com/DamianVasilenco/DamianVasilenco.github.io/master/_posts/adventofcode/2017/day_1/part-1.rs)